import Testing
import Foundation

// MARK: - 替换你的项目名
@testable import HactoolSwift

@Suite("NCA Parser Golden Master Test")
struct NCAParserGoldenMasterTests {

    // --- SWIFT MOCK DATA ---
    let mockDecryptedHeader = Data([
        0x43, 0xC4, 0x8C, 0x36, 0x58, 0x30, 0xDB, 0x78, 0x98, 0x74, 0x3E, 0xDE, 0x9E, 0xD9, 0xCF, 0x98,
        0xB1, 0x86, 0x63, 0x94, 0x22, 0xB5, 0x9F, 0xE8, 0x69, 0xB7, 0xA7, 0xF7, 0xA4, 0x48, 0x28, 0xD3,
        0x4E, 0x9A, 0xCE, 0xFE, 0x28, 0x26, 0x0A, 0x15, 0x59, 0x1E, 0x9B, 0xC2, 0xF1, 0x10, 0x32, 0xB1,
        0x7F, 0xD6, 0x4B, 0x52, 0x2C, 0x75, 0xC1, 0xF0, 0x55, 0xCB, 0xDC, 0xE9, 0x0C, 0x04, 0xC5, 0xE5,
        0xC9, 0x80, 0x9D, 0xEB, 0x72, 0xA9, 0x58, 0x6E, 0x5B, 0x22, 0x44, 0xFE, 0x6E, 0x3B, 0xB7, 0x94,
        0x15, 0xC6, 0xE7, 0x29, 0xCD, 0xE4, 0x97, 0x16, 0x37, 0xE3, 0x21, 0xF4, 0xD3, 0xCC, 0x2A, 0xA8,
        0x85, 0x1A, 0xB3, 0x60, 0x36, 0xBE, 0x6B, 0x26, 0x35, 0x80, 0x20, 0x1E, 0x76, 0x0C, 0x1E, 0xCB,
        0x01, 0x0C, 0xAE, 0xD1, 0x75, 0xBA, 0xD1, 0xC8, 0xDA, 0x89, 0xE9, 0x4F, 0x56, 0x8F, 0x6B, 0x43,
        0x85, 0xF7, 0x97, 0xBB, 0xA4, 0x40, 0x98, 0x95, 0x1B, 0x3B, 0xAB, 0xAB, 0xC0, 0xE3, 0x56, 0x21,
        0xEF, 0x26, 0xAA, 0xCB, 0x49, 0xA2, 0xC5, 0x8E, 0xA9, 0xE6, 0x37, 0xD2, 0x39, 0x1E, 0x27, 0x34,
        0xF2, 0xE9, 0x5C, 0x7C, 0x76, 0xA5, 0xC1, 0xC9, 0xB6, 0x84, 0xDF, 0xF5, 0x99, 0x5B, 0x79, 0x77,
        0x3C, 0x20, 0x8E, 0x23, 0x29, 0xDA, 0xF1, 0xDB, 0x73, 0x82, 0xE1, 0xDA, 0x98, 0xA6, 0xBC, 0x75,
        0x78, 0x58, 0x7B, 0xCA, 0xCE, 0x13, 0xE4, 0x57, 0xC4, 0xC0, 0xC2, 0xBE, 0x07, 0x19, 0x19, 0xCF,
        0x78, 0x69, 0x1A, 0xE1, 0xA9, 0xBD, 0x00, 0x87, 0xAA, 0x44, 0xE1, 0xD8, 0x68, 0x83, 0xC7, 0xED,
        0x0C, 0xE0, 0x9A, 0x12, 0xE1, 0x6D, 0xC6, 0xE6, 0xE3, 0xDE, 0x21, 0xCF, 0x9F, 0x05, 0xE9, 0x9D,
        0x2A, 0x9C, 0xA2, 0x45, 0x4F, 0xC6, 0xE8, 0xEE, 0x59, 0x48, 0x56, 0xFC, 0x1C, 0x24, 0x86, 0xE1,
        0x54, 0x71, 0x61, 0xBA, 0xF4, 0x01, 0x0C, 0x47, 0xD6, 0x2B, 0x7E, 0xF4, 0xD6, 0x1C, 0x5C, 0xD4,
        0xC0, 0xFC, 0x44, 0x97, 0xA5, 0xA5, 0x54, 0xAC, 0x5D, 0x38, 0x33, 0xD5, 0xAD, 0xC7, 0x86, 0x87,
        0xD4, 0xE8, 0xC8, 0x33, 0x46, 0xCA, 0x39, 0x50, 0xF4, 0x6D, 0x5D, 0x17, 0x25, 0x00, 0xCA, 0x0D,
        0xED, 0xA9, 0x1B, 0x93, 0xAC, 0x23, 0x8D, 0x17, 0x50, 0x1C, 0x87, 0x2E, 0xE0, 0x8C, 0xAF, 0xB0,
        0xDF, 0x03, 0xE5, 0xBA, 0xFE, 0x07, 0x55, 0x90, 0x13, 0xE4, 0xF4, 0x91, 0xBC, 0x41, 0x79, 0xD4,
        0x32, 0x03, 0x4B, 0x0F, 0x85, 0xC2, 0xF5, 0x02, 0x54, 0x9B, 0x60, 0x8A, 0x94, 0x76, 0xF1, 0x32,
        0x10, 0x61, 0x6D, 0x83, 0x00, 0x5C, 0xED, 0x8E, 0x14, 0xA8, 0x76, 0xA3, 0x2D, 0x79, 0x85, 0x05,
        0x8A, 0x9A, 0x48, 0x8C, 0x05, 0x82, 0x6E, 0x8E, 0xD2, 0x26, 0xE8, 0xF4, 0x8F, 0xD8, 0x17, 0x5F,
        0x6F, 0xF8, 0x9A, 0x6B, 0xB2, 0x01, 0x12, 0x44, 0xEF, 0xDA, 0x4C, 0x4B, 0xE7, 0x4D, 0xAD, 0xE4,
        0xF6, 0x26, 0x60, 0x41, 0x34, 0x4B, 0x6D, 0x72, 0x89, 0x47, 0x55, 0x93, 0x9E, 0xD5, 0xD5, 0xE4,
        0x28, 0xD7, 0xCA, 0x05, 0x46, 0xE8, 0x67, 0xFC, 0x52, 0x33, 0x9B, 0x8E, 0x94, 0x83, 0xFE, 0x2E,
        0xA3, 0xCB, 0xE9, 0x42, 0xC4, 0x1C, 0x09, 0x3D, 0x19, 0x2D, 0x3F, 0x3D, 0xFF, 0x8D, 0x6B, 0xBA,
        0x7F, 0xDF, 0x48, 0x4A, 0xC4, 0xF3, 0x68, 0x26, 0xEF, 0x1F, 0xD1, 0xCE, 0x5E, 0x62, 0xAF, 0xF6,
        0x23, 0xEE, 0x7F, 0xFE, 0xB9, 0xE3, 0x01, 0x05, 0x16, 0x71, 0x89, 0xC3, 0xF1, 0xCF, 0x12, 0xCB,
        0xF8, 0xD4, 0x28, 0x58, 0xF5, 0x02, 0xA5, 0xEA, 0x38, 0x54, 0xF2, 0x35, 0xAA, 0xB5, 0x74, 0x30,
        0x2B, 0xEC, 0x2A, 0x8B, 0x1A, 0x09, 0x4C, 0x9B, 0x7E, 0x9D, 0xB8, 0xDB, 0xB6, 0x77, 0xBF, 0x10,
        0x4E, 0x43, 0x41, 0x33, 0x00, 0x00, 0x02, 0x00, 0x00, 0xC0, 0x74, 0x2E, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x40, 0x06, 0x07, 0x90, 0x8E, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x03,
        0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x01, 0x00, 0x8E, 0x90, 0x07, 0x06, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04,
        0xA0, 0x75, 0x16, 0x00, 0x60, 0x3A, 0x17, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0xE0, 0x00, 0x00, 0x00, 0xA0, 0x75, 0x16, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x20, 0x00, 0x00, 0x00, 0xE0, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x03, 0xE0, 0x40, 0x84, 0xDD, 0x77, 0x88, 0xD7, 0x6F, 0x96, 0x3C, 0xD3, 0xE6, 0xEC, 0xB3, 0x0F,
        0x8F, 0xEC, 0x7A, 0x67, 0x2A, 0x59, 0x3A, 0xF4, 0xF6, 0xEB, 0x72, 0x95, 0x25, 0x22, 0x32, 0xFD,
        0xEE, 0xAE, 0x16, 0x83, 0xDD, 0xC1, 0x40, 0xED, 0xE1, 0xA3, 0x71, 0xB7, 0x71, 0x5F, 0x4E, 0x36,
        0x92, 0x0B, 0xA2, 0x16, 0x26, 0x21, 0xFE, 0xFF, 0x60, 0xF5, 0xA8, 0x3C, 0x72, 0x46, 0x85, 0x2A,
        0x3B, 0x2A, 0xF0, 0xDE, 0x5C, 0xC8, 0x28, 0xAF, 0x5E, 0xAD, 0x31, 0x0F, 0x9C, 0x09, 0x8B, 0xB8,
        0xFA, 0x60, 0x02, 0x8D, 0x0D, 0x42, 0x03, 0x0E, 0xF0, 0x82, 0x73, 0x2D, 0x45, 0x6B, 0xE4, 0x84,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x02, 0x00, 0x01, 0x02, 0x03, 0x00, 0x00, 0x00, 0xD4, 0x9A, 0xDC, 0x30, 0x64, 0x9E, 0x10, 0x6A,
        0xF4, 0x21, 0x90, 0xCC, 0x52, 0x70, 0xFF, 0xB6, 0x9B, 0xB0, 0xFD, 0x4C, 0x43, 0x04, 0x15, 0x0E,
        0x16, 0x31, 0x95, 0x51, 0x1B, 0x40, 0x13, 0xC0, 0x00, 0x80, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x62, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xA5, 0xD5, 0x88, 0x01, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x02, 0x00, 0x00, 0x03, 0x03, 0x00, 0x00, 0x00, 0x49, 0x56, 0x46, 0x43, 0x00, 0x00, 0x02, 0x00,
        0x20, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x0E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x0E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x80, 0x16, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x80, 0x17, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0xC6, 0xD1, 0x2C, 0x00, 0x00, 0x00, 0x00,
        0x0E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x55, 0xB4, 0x73, 0x3D, 0x07, 0x2D, 0xC8, 0xCB,
        0x66, 0x19, 0x0B, 0x9D, 0xC0, 0x8B, 0x2D, 0x9A, 0x7F, 0xB3, 0xDF, 0xBA, 0x50, 0xE8, 0xD3, 0x10,
        0xFE, 0x44, 0x51, 0xE1, 0x8D, 0x37, 0xFD, 0x96, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x02, 0x00, 0x01, 0x02, 0x01, 0x00, 0x00, 0x00, 0x5D, 0x02, 0xE6, 0xBB, 0xD3, 0x46, 0xB5, 0xFC,
        0xD4, 0x30, 0x07, 0x63, 0xAF, 0x23, 0xCC, 0x1C, 0x1C, 0xE2, 0xC9, 0x4A, 0xD7, 0xED, 0xF8, 0xD5,
        0x2C, 0x75, 0x61, 0x50, 0x83, 0x01, 0x77, 0x55, 0x00, 0x10, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xD4, 0x17, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
    ])
    // --- END SWIFT MOCK DATA ---
    struct MockSectionInfo {
        let startOffset: UInt32
        let endOffset: UInt32
        let fsType: UInt8
        let cryptoType: UInt8
    }

    let mockSections: [MockSectionInfo] = [
        MockSectionInfo(startOffset: 0x1675A0, endOffset: 0x173A60, fsType: 2, cryptoType: 3),
        MockSectionInfo(startOffset: 0xE0, endOffset: 0x1675A0, fsType: 3, cryptoType: 3),
        MockSectionInfo(startOffset: 0x20, endOffset: 0xE0, fsType: 2, cryptoType: 1),
        MockSectionInfo(startOffset: 0x0, endOffset: 0x0, fsType: 0, cryptoType: 0)
    ]

    // ----- END: COPY UNTIL HERE FOR SWIFT UNIT TEST -----
    // =================================================================
    // MARK: - 单元测试
    // =================================================================
    
    @Test("Should correctly parse the known decrypted header from hactool")
    func testGoldenMasterParsing() throws {
        
        // --- ARRANGE ---
        // 1. 创建 parser 实例
        let keyset = Keyset()
        try keyset.load()
        let parser = NCAParser(dataProvider: { _, _ in Data() }, keyset: keyset)

        // 2. 根据 mockSections 生成预期的解析结果
        var expectedEntries: [NCAHeader.SectionEntry] = []
        for info in mockSections {
            let size = (info.endOffset >= info.startOffset) ? UInt64(info.endOffset - info.startOffset) * 0x200 : 0
            
            var crypto: NCAEncryptionType
            switch info.cryptoType {
                case 0: crypto = .none
                case 1: crypto = .xts
                case 2, 3: crypto = .ctr // <-- 你的 Swift 代码逻辑
                case 4: crypto = .bktr
                default:
                    Issue.record("Invalid crypto type \(info.cryptoType) in mock data.")
                    continue
            }
            
            // 如果 startOffset 为 0，则为非活动 section
            if info.startOffset == 0 {
                expectedEntries.append(NCAHeader.SectionEntry(offset: 0, size: 0, fsType: 0, cryptoType: .none))
            } else {
                expectedEntries.append(NCAHeader.SectionEntry(
                    offset: UInt64(info.startOffset) * 0x200,
                    size: size,
                    fsType: info.fsType,
                    cryptoType: crypto
                ))
            }
        }
        
        // --- ACT ---
        // 3. 调用被测试的核心解析函数
        try parser.parseDecryptedHeader(from: mockDecryptedHeader)

        // --- ASSERT ---
        // 4. 验证 Header 和所有 Section
        let header = try #require(parser.header, "Header should not be nil after parsing")
        
        #expect(header.sectionEntries.count == 4)
        
        for i in 0..<4 {
            let actual = header.sectionEntries[i]
            let expected = expectedEntries[i]
            
            #expect(actual == expected, "Section \(i) did not match expected value. Actual: \(actual), Expected: \(expected)")
        }
    }
}
